From 70148979fc4f13da0c33914c0826753746b21d4d Mon Sep 17 00:00:00 2001
From: Austin Mayes <austin@avicus.net>
Date: Sun, 15 Oct 2017 21:01:56 -0500
Subject: [PATCH] Server suspend API

---
 src/main/java/org/bukkit/Server.java               | 71 ++++++++++++++++++++++
 .../java/org/bukkit/command/SimpleCommandMap.java  |  1 +
 .../bukkit/command/defaults/SuspendCommand.java    | 53 ++++++++++++++++
 src/main/java/org/bukkit/event/SimpleEventBus.java | 33 +++++++---
 .../bukkit/event/server/ServerSuspendEvent.java    | 16 +++++
 src/test/java/org/bukkit/TestServer.java           |  2 +-
 src/test/java/org/bukkit/event/EventBusTest.java   | 15 +----
 .../java/org/bukkit/plugin/PluginManagerTest.java  | 22 -------
 8 files changed, 169 insertions(+), 44 deletions(-)
 create mode 100644 src/main/java/org/bukkit/command/defaults/SuspendCommand.java
 create mode 100644 src/main/java/org/bukkit/event/server/ServerSuspendEvent.java

diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index c32ca44..d9bf0e3 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -3,6 +3,8 @@ package org.bukkit;
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.Serializable;
+import java.time.Duration;
+import java.time.Instant;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
@@ -12,6 +14,7 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.logging.Logger;
 
+import javax.annotation.Nullable;
 import net.avicus.minecraft.api.server.LocalServer;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.command.CommandException;
@@ -134,6 +137,13 @@ public interface Server extends PluginMessageRecipient, BukkitRuntime, LocalServ
     Map<UUID, Player> playersById();
 
     /**
+     * Time to wait before automatically suspending an empty server.
+     *
+     * @see #setSuspended(boolean)
+     */
+    @Nullable Duration getEmptyServerSuspendDelay();
+
+    /**
      * Get the maximum amount of players which can login to this server.
      *
      * @return the amount of players this server allows
@@ -1124,5 +1134,66 @@ public interface Server extends PluginMessageRecipient, BukkitRuntime, LocalServ
      *         false if it was added to the main thread queue
      */
     boolean runOnMainThread(Plugin plugin, boolean priority, Runnable task);
+
+    /**
+     * Suspend or resume the server.
+     *
+     * A suspended server does not tick or run scheduled tasks. However, it does
+     * execute console commands, and tasks submitted to {@link #postToMainThread},
+     * while remaining suspended.
+     *
+     * The server can only be suspended when no players are connected. The server
+     * will resume when a player successfully logs in. Failed logins due to bans
+     * or whitelisting do not cause the server to resume.
+     *
+     * @param suspend true to suspend the server, false to resume
+     *
+     * @return true if the suspended state of the server changed,
+     *         false if the state did not change, because the server was already
+     *         in the given state, or because the change is not currently possible.
+     *
+     * @see org.bukkit.event.server.ServerSuspendEvent
+     */
+    boolean setSuspended(boolean suspend);
+
+    /**
+     * Can the server be suspended right now?
+     *
+     * The server can be suspended only when it has no players connected,
+     * and is not in the process of shutting down. This method returns
+     * true if the server is already suspended.
+     *
+     * @see #setSuspended(boolean)
+     */
+    boolean canSuspend();
+
+    /**
+     * Is the server currently suspended?
+     *
+     * @see #setSuspended(boolean)
+     */
+    boolean isSuspended();
+
+    /**
+     * The {@link Instant} that the server entered the suspended state,
+     * or null if the server is not currently suspended.
+     *
+     * @see #setSuspended(boolean)
+     */
+    @Nullable Instant suspendedAt();
+
+    /**
+     * The number of times the server has been interrupted from suspension.
+     *
+     * If the server is not currently suspended, returns 0.
+     *
+     * Interruptions are caused by tasks posted to the main thread through
+     * {@link #postToMainThread}, console commands, and various internal events.
+     * Internal interruptions should be rare. If the server is being interrupted
+     * frequently, it is likely caused by a plugin.
+     *
+     * @see #setSuspended(boolean)
+     */
+    int interruptions();
     // Magnet end
 }
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index f35bc09..10d0711 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -36,6 +36,7 @@ public class SimpleCommandMap implements CommandMap {
         register("bukkit", new ReloadCommand("reload"));
         register("bukkit", new PluginsCommand("plugins"));
         register("bukkit", new co.aikar.timings.TimingsCommand("timings")); // Spigot
+        register("bukkit", new SuspendCommand());
     }
 
     public void setFallbackCommands() {
diff --git a/src/main/java/org/bukkit/command/defaults/SuspendCommand.java b/src/main/java/org/bukkit/command/defaults/SuspendCommand.java
new file mode 100644
index 0000000..12050f6
--- /dev/null
+++ b/src/main/java/org/bukkit/command/defaults/SuspendCommand.java
@@ -0,0 +1,53 @@
+package org.bukkit.command.defaults;
+
+import java.time.Duration;
+import java.time.Instant;
+import java.util.Collections;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import org.bukkit.Server;
+import org.bukkit.command.CommandSender;
+
+public class SuspendCommand extends BukkitCommand {
+
+  public SuspendCommand() {
+    super(
+        "suspend",
+        "Suspends the server, if no players are connected",
+        "/suspend [true|false]",
+        Collections.emptyList()
+    );
+  }
+
+  @Override
+  public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+    if(!testPermission(sender)) return true;
+    final Server server = sender.getServer();
+    if(args.length == 0) {
+      final Instant at = server.suspendedAt();
+      if(at == null) {
+        sender.sendMessage(new ComponentBuilder("Server is not suspended").color(ChatColor.WHITE).create());
+      } else {
+        final Duration dur = Duration.between(at, Instant.now());
+        sender.sendMessage(new ComponentBuilder(
+            "Server suspended for " + dur +
+                " and interrupted " + server.interruptions() + " times"
+        ).color(ChatColor.WHITE).create());
+      }
+    } else if("true".equals(args[0])) {
+      if(server.isSuspended()) {
+        sender.sendMessage(new ComponentBuilder("Server is already suspended").color(ChatColor.RED).create());
+        return true;
+      }
+      if(!server.setSuspended(true)) {
+        sender.sendMessage(new ComponentBuilder("Server cannot be suspended while players are connected").color(ChatColor.RED).create());
+      }
+    } else if("false".equals(args[0])) {
+      if(!server.setSuspended(false)) {
+        sender.sendMessage(new ComponentBuilder("Server is not currently suspended").color(ChatColor.RED).create());
+      }
+    }
+    return true;
+  }
+}
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/event/SimpleEventBus.java b/src/main/java/org/bukkit/event/SimpleEventBus.java
index 9fdb4f6..6f1f16c 100644
--- a/src/main/java/org/bukkit/event/SimpleEventBus.java
+++ b/src/main/java/org/bukkit/event/SimpleEventBus.java
@@ -1,19 +1,22 @@
 package org.bukkit.event;
 
+import com.google.common.util.concurrent.SettableFuture;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
 
 public class SimpleEventBus implements EventBus {
 
   private final Thread primaryThread;
-  private final Object lock;
+  private final Executor syncExecutor;
 
   public SimpleEventBus() {
     this(null, null);
   }
 
-  public SimpleEventBus(@Nullable Thread primaryThread, @Nullable Object lock) {
+  public SimpleEventBus(@Nullable Thread primaryThread, @Nullable Executor syncExecutor) {
     this.primaryThread = primaryThread != null ? primaryThread : Thread.currentThread();
-    this.lock = lock != null ? lock : new Object();
+    this.syncExecutor = syncExecutor != null ? syncExecutor : Runnable::run;
   }
 
   @Override
@@ -34,16 +37,30 @@ public class SimpleEventBus implements EventBus {
   @Override
   public <T extends Event, X extends Throwable> void callEvent(T event, @Nullable EventPriority priority, @Nullable EventBody<? super T, X> body) throws X {
     if(event.isAsynchronous()) {
-      if(Thread.holdsLock(lock)) {
-        throw new IllegalStateException(event.getEventName() + " cannot be called asynchronously from inside synchronized code.");
-      }
       if(Thread.currentThread().equals(primaryThread)) {
         throw new IllegalStateException(event.getEventName() + " cannot be called asynchronously from primary thread.");
       }
       callEvent0(event, priority, body);
     } else {
-      synchronized(lock) {
-        callEvent0(event, priority, body);
+      final SettableFuture future = SettableFuture.create();
+      syncExecutor.execute(() -> {
+        try {
+          callEvent0(event, priority, body);
+          future.set(null);
+        } catch(Throwable ex) {
+          future.setException(ex);
+        }
+      });
+
+      for(;;) {
+        try {
+          future.get();
+          return;
+        } catch(InterruptedException e) {
+          // try again
+        } catch(ExecutionException e) {
+          throw (X) e.getCause();
+        }
       }
     }
   }
diff --git a/src/main/java/org/bukkit/event/server/ServerSuspendEvent.java b/src/main/java/org/bukkit/event/server/ServerSuspendEvent.java
new file mode 100644
index 0000000..367da37
--- /dev/null
+++ b/src/main/java/org/bukkit/event/server/ServerSuspendEvent.java
@@ -0,0 +1,16 @@
+package org.bukkit.event.server;
+
+import org.bukkit.Server;
+import org.bukkit.event.HandlerList;
+
+/**
+ * Fired when the server transitions to a suspended state, which can happen from an
+ * explicit call to {@link org.bukkit.Server#setSuspended(boolean)}, or automatically
+ * due to {@link Server#getEmptyServerSuspendDelay()}.
+ *
+ * The suspension happens entirely within the event. A call to {@link #yield()}
+ * will not return until the server has resumed.
+ */
+public class ServerSuspendEvent extends ServerEvent {
+  private static final HandlerList<ServerSuspendEvent> handlers = new HandlerList<>();
+}
\ No newline at end of file
diff --git a/src/test/java/org/bukkit/TestServer.java b/src/test/java/org/bukkit/TestServer.java
index 5654c50..1366d71 100644
--- a/src/test/java/org/bukkit/TestServer.java
+++ b/src/test/java/org/bukkit/TestServer.java
@@ -87,7 +87,7 @@ public class TestServer implements InvocationHandler {
             Server instance = Proxy.getProxyClass(Server.class.getClassLoader(), Server.class).asSubclass(Server.class).getConstructor(InvocationHandler.class).newInstance(server);
             Bukkit.setServer(instance);
             server.pluginManager = new SimplePluginManager(instance, new SimpleCommandMap(instance));
-            server.eventBus = new SimpleEventBus(null, server.pluginManager);
+            server.eventBus = new SimpleEventBus(null, null);
         } catch (Throwable t) {
             throw new Error(t);
         }
diff --git a/src/test/java/org/bukkit/event/EventBusTest.java b/src/test/java/org/bukkit/event/EventBusTest.java
index 513200e..2d56702 100644
--- a/src/test/java/org/bukkit/event/EventBusTest.java
+++ b/src/test/java/org/bukkit/event/EventBusTest.java
@@ -20,13 +20,13 @@ public class EventBusTest {
   static class Oops extends Exception {}
 
   ExceptionHandler exceptionHandler = new TestExceptionHandler();
-  Object lock;
   SimpleEventBus bus;
   List<String> flow;
 
+
   @Before
   public void setUp() throws Exception {
-    bus = new SimpleEventBus(Thread.currentThread(), lock = new Object());
+    bus = new SimpleEventBus(Thread.currentThread(), null);
     flow = new ArrayList<>();
   }
 
@@ -79,17 +79,6 @@ public class EventBusTest {
   }
 
   @Test
-  public void asyncEventHoldingLockThrows() throws Throwable {
-    TestThread.join(() -> {
-      synchronized(lock) {
-        assertThrows(IllegalStateException.class, () ->
-            bus.callEvent(new TestEvent(true))
-        );
-      }
-    });
-  }
-
-  @Test
   public void eventWithBody() throws Exception {
     bus.callEvent(new TestEvent(), event ->
         flow("body")
diff --git a/src/test/java/org/bukkit/plugin/PluginManagerTest.java b/src/test/java/org/bukkit/plugin/PluginManagerTest.java
index fd00bd9..5261b92 100644
--- a/src/test/java/org/bukkit/plugin/PluginManagerTest.java
+++ b/src/test/java/org/bukkit/plugin/PluginManagerTest.java
@@ -39,28 +39,6 @@ public class PluginManagerTest {
     }
 
     @Test
-    public void testAsyncLocked() throws InterruptedException {
-        final Event event = new TestEvent(true);
-        Thread secondThread = new Thread(
-            new Runnable() {
-                public void run() {
-                    try {
-                        synchronized (pm) {
-                            pm.callEvent(event);
-                        }
-                    } catch (Throwable ex) {
-                        store.value = ex;
-                    }
-                }
-            }
-        );
-        secondThread.start();
-        secondThread.join();
-        assertThat(store.value, is(instanceOf(IllegalStateException.class)));
-        assertThat(event.getEventName() + " cannot be called asynchronously from inside synchronized code.", is(((Throwable) store.value).getMessage()));
-    }
-
-    @Test
     public void testAsyncUnlocked() throws InterruptedException {
         final Event event = new TestEvent(true);
         Thread secondThread = new Thread(
-- 
2.6.4

