From d0cdeb68293d98ee7fa92ab10e0850bb9d67a107 Mon Sep 17 00:00:00 2001
From: Austin Mayes <austin@avicus.net>
Date: Mon, 16 Oct 2017 11:45:28 -0500
Subject: [PATCH] This is magnet

  Also includes some legacy mc-dev imports
---
 pom.xml                                            |  18 +-
 .../java/net/minecraft/server/MinecraftServer.java |   2 +-
 .../server/PacketPlayOutEntityMetadata.java        |  40 ++++
 .../minecraft/server/PacketPlayOutPlayerInfo.java  | 254 +++++++++++++++++++++
 .../server/PacketPlayOutScoreboardTeam.java        | 112 +++++++++
 .../org/bukkit/craftbukkit/util/Versioning.java    |   2 +-
 6 files changed, 416 insertions(+), 12 deletions(-)
 create mode 100644 src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
 create mode 100644 src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
 create mode 100644 src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java

diff --git a/pom.xml b/pom.xml
index 6aaba50..f5aa732 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,12 +1,10 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
-    <groupId>org.github.paperspigot</groupId>
-    <artifactId>paperspigot</artifactId>
+
+    <artifactId>magnet</artifactId>
     <packaging>jar</packaging>
     <version>1.8.8-R0.1-SNAPSHOT</version>
-    <name>PaperSpigot</name>
-    <url>https://hub.spigotmc.org/stash/projects/PAPER/</url>
 
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -22,9 +20,9 @@
     </properties>
 
     <parent>
-        <groupId>org.github.paperspigot</groupId>
-        <artifactId>paperspigot-parent</artifactId>
-        <version>dev-SNAPSHOT</version>
+        <groupId>net.avicus</groupId>
+        <artifactId>magnet-parent</artifactId>
+        <version>dev-1.8-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
@@ -35,8 +33,8 @@
             <version>3.0.3</version>
         </dependency>
         <dependency>
-            <groupId>org.github.paperspigot</groupId>
-            <artifactId>paperspigot-api</artifactId>
+            <groupId>net.avicus</groupId>
+            <artifactId>magnet-api</artifactId>
             <version>${project.version}</version>
             <type>jar</type>
             <scope>compile</scope>
@@ -113,7 +111,7 @@
             <artifactId>gitdescribe-maven-plugin</artifactId>
             <version>1.3</version>
             <configuration>
-                <outputPrefix>git-PaperSpigot-</outputPrefix>
+                <outputPrefix>git-PaperMagnet-</outputPrefix>
                 <scmDirectory>..</scmDirectory>
             </configuration>
             <executions>
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b400ce0..a7c8cba 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1084,7 +1084,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     }
 
     public String getServerModName() {
-        return "PaperSpigot"; // PaperSpigot - PaperSpigot > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        return "Magnet"; // Magnet - Magnet > // PaperSpigot - PaperSpigot > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
     }
 
     public CrashReport b(CrashReport crashreport) {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
new file mode 100644
index 0000000..c5be70f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
@@ -0,0 +1,40 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.util.List;
+
+public class PacketPlayOutEntityMetadata implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private List<DataWatcher.WatchableObject> b;
+
+    public PacketPlayOutEntityMetadata() {}
+
+    public PacketPlayOutEntityMetadata(int i, DataWatcher datawatcher, boolean flag) {
+        this.a = i;
+        if (flag) {
+            this.b = datawatcher.c();
+        } else {
+            this.b = datawatcher.b();
+        }
+
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.e();
+        this.b = DataWatcher.b(packetdataserializer);
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.b(this.a);
+        DataWatcher.a(this.b, packetdataserializer);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketListenerPlayOut) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
new file mode 100644
index 0000000..fc5ad29
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
@@ -0,0 +1,254 @@
+package net.minecraft.server;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.Lists;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.properties.Property;
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.List;
+
+public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
+
+    private PacketPlayOutPlayerInfo.EnumPlayerInfoAction a;
+    private final List<PacketPlayOutPlayerInfo.PlayerInfoData> b = Lists.newArrayList();
+
+    public PacketPlayOutPlayerInfo() {}
+
+    public PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction packetplayoutplayerinfo_enumplayerinfoaction, EntityPlayer... aentityplayer) {
+        this.a = packetplayoutplayerinfo_enumplayerinfoaction;
+        EntityPlayer[] aentityplayer1 = aentityplayer;
+        int i = aentityplayer.length;
+
+        for (int j = 0; j < i; ++j) {
+            EntityPlayer entityplayer = aentityplayer1[j];
+
+            this.b.add(new PacketPlayOutPlayerInfo.PlayerInfoData(entityplayer.getProfile(), entityplayer.ping, entityplayer.playerInteractManager.getGameMode(), entityplayer.getPlayerListName()));
+        }
+
+    }
+
+    public PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction packetplayoutplayerinfo_enumplayerinfoaction, Iterable<EntityPlayer> iterable) {
+        this.a = packetplayoutplayerinfo_enumplayerinfoaction;
+        Iterator iterator = iterable.iterator();
+
+        while (iterator.hasNext()) {
+            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
+
+            this.b.add(new PacketPlayOutPlayerInfo.PlayerInfoData(entityplayer.getProfile(), entityplayer.ping, entityplayer.playerInteractManager.getGameMode(), entityplayer.getPlayerListName()));
+        }
+
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = (PacketPlayOutPlayerInfo.EnumPlayerInfoAction) packetdataserializer.a(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.class);
+        int i = packetdataserializer.e();
+
+        for (int j = 0; j < i; ++j) {
+            GameProfile gameprofile = null;
+            int k = 0;
+            WorldSettings.EnumGamemode worldsettings_enumgamemode = null;
+            IChatBaseComponent ichatbasecomponent = null;
+
+            switch (PacketPlayOutPlayerInfo.SyntheticClass_1.a[this.a.ordinal()]) {
+            case 1:
+                gameprofile = new GameProfile(packetdataserializer.g(), packetdataserializer.c(16));
+                int l = packetdataserializer.e();
+
+                for (int i1 = 0; i1 < l; ++i1) {
+                    String s = packetdataserializer.c(32767);
+                    String s1 = packetdataserializer.c(32767);
+
+                    if (packetdataserializer.readBoolean()) {
+                        gameprofile.getProperties().put(s, new Property(s, s1, packetdataserializer.c(32767)));
+                    } else {
+                        gameprofile.getProperties().put(s, new Property(s, s1));
+                    }
+                }
+
+                worldsettings_enumgamemode = WorldSettings.EnumGamemode.getById(packetdataserializer.e());
+                k = packetdataserializer.e();
+                if (packetdataserializer.readBoolean()) {
+                    ichatbasecomponent = packetdataserializer.d();
+                }
+                break;
+
+            case 2:
+                gameprofile = new GameProfile(packetdataserializer.g(), (String) null);
+                worldsettings_enumgamemode = WorldSettings.EnumGamemode.getById(packetdataserializer.e());
+                break;
+
+            case 3:
+                gameprofile = new GameProfile(packetdataserializer.g(), (String) null);
+                k = packetdataserializer.e();
+                break;
+
+            case 4:
+                gameprofile = new GameProfile(packetdataserializer.g(), (String) null);
+                if (packetdataserializer.readBoolean()) {
+                    ichatbasecomponent = packetdataserializer.d();
+                }
+                break;
+
+            case 5:
+                gameprofile = new GameProfile(packetdataserializer.g(), (String) null);
+            }
+
+            this.b.add(new PacketPlayOutPlayerInfo.PlayerInfoData(gameprofile, k, worldsettings_enumgamemode, ichatbasecomponent));
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a((Enum) this.a);
+        packetdataserializer.b(this.b.size());
+        Iterator iterator = this.b.iterator();
+
+        while (iterator.hasNext()) {
+            PacketPlayOutPlayerInfo.PlayerInfoData packetplayoutplayerinfo_playerinfodata = (PacketPlayOutPlayerInfo.PlayerInfoData) iterator.next();
+
+            switch (PacketPlayOutPlayerInfo.SyntheticClass_1.a[this.a.ordinal()]) {
+            case 1:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getName());
+                packetdataserializer.b(packetplayoutplayerinfo_playerinfodata.a().getProperties().size());
+                Iterator iterator1 = packetplayoutplayerinfo_playerinfodata.a().getProperties().values().iterator();
+
+                while (iterator1.hasNext()) {
+                    Property property = (Property) iterator1.next();
+
+                    packetdataserializer.a(property.getName());
+                    packetdataserializer.a(property.getValue());
+                    if (property.hasSignature()) {
+                        packetdataserializer.writeBoolean(true);
+                        packetdataserializer.a(property.getSignature());
+                    } else {
+                        packetdataserializer.writeBoolean(false);
+                    }
+                }
+
+                packetdataserializer.b(packetplayoutplayerinfo_playerinfodata.c().getId());
+                packetdataserializer.b(packetplayoutplayerinfo_playerinfodata.b());
+                if (packetplayoutplayerinfo_playerinfodata.d() == null) {
+                    packetdataserializer.writeBoolean(false);
+                } else {
+                    packetdataserializer.writeBoolean(true);
+                    packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.d());
+                }
+                break;
+
+            case 2:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+                packetdataserializer.b(packetplayoutplayerinfo_playerinfodata.c().getId());
+                break;
+
+            case 3:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+                packetdataserializer.b(packetplayoutplayerinfo_playerinfodata.b());
+                break;
+
+            case 4:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+                if (packetplayoutplayerinfo_playerinfodata.d() == null) {
+                    packetdataserializer.writeBoolean(false);
+                } else {
+                    packetdataserializer.writeBoolean(true);
+                    packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.d());
+                }
+                break;
+
+            case 5:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+            }
+        }
+
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public String toString() {
+        return Objects.toStringHelper(this).add("action", this.a).add("entries", this.b).toString();
+    }
+
+    static class SyntheticClass_1 {
+
+        static final int[] a = new int[PacketPlayOutPlayerInfo.EnumPlayerInfoAction.values().length];
+
+        static {
+            try {
+                PacketPlayOutPlayerInfo.SyntheticClass_1.a[PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER.ordinal()] = 1;
+            } catch (NoSuchFieldError nosuchfielderror) {
+                ;
+            }
+
+            try {
+                PacketPlayOutPlayerInfo.SyntheticClass_1.a[PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_GAME_MODE.ordinal()] = 2;
+            } catch (NoSuchFieldError nosuchfielderror1) {
+                ;
+            }
+
+            try {
+                PacketPlayOutPlayerInfo.SyntheticClass_1.a[PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_LATENCY.ordinal()] = 3;
+            } catch (NoSuchFieldError nosuchfielderror2) {
+                ;
+            }
+
+            try {
+                PacketPlayOutPlayerInfo.SyntheticClass_1.a[PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_DISPLAY_NAME.ordinal()] = 4;
+            } catch (NoSuchFieldError nosuchfielderror3) {
+                ;
+            }
+
+            try {
+                PacketPlayOutPlayerInfo.SyntheticClass_1.a[PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER.ordinal()] = 5;
+            } catch (NoSuchFieldError nosuchfielderror4) {
+                ;
+            }
+
+        }
+    }
+
+    public class PlayerInfoData {
+
+        private final int b;
+        private final WorldSettings.EnumGamemode c;
+        private final GameProfile d;
+        private final IChatBaseComponent e;
+
+        public PlayerInfoData(GameProfile gameprofile, int i, WorldSettings.EnumGamemode worldsettings_enumgamemode, IChatBaseComponent ichatbasecomponent) {
+            this.d = gameprofile;
+            this.b = i;
+            this.c = worldsettings_enumgamemode;
+            this.e = ichatbasecomponent;
+        }
+
+        public GameProfile a() {
+            return this.d;
+        }
+
+        public int b() {
+            return this.b;
+        }
+
+        public WorldSettings.EnumGamemode c() {
+            return this.c;
+        }
+
+        public IChatBaseComponent d() {
+            return this.e;
+        }
+
+        public String toString() {
+            return Objects.toStringHelper(this).add("latency", this.b).add("gameMode", this.c).add("profile", this.d).add("displayName", this.e == null ? null : IChatBaseComponent.ChatSerializer.a(this.e)).toString();
+        }
+    }
+
+    public static enum EnumPlayerInfoAction {
+
+        ADD_PLAYER, UPDATE_GAME_MODE, UPDATE_LATENCY, UPDATE_DISPLAY_NAME, REMOVE_PLAYER;
+
+        private EnumPlayerInfoAction() {}
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
new file mode 100644
index 0000000..4b8eb3e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
@@ -0,0 +1,112 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Iterator;
+
+public class PacketPlayOutScoreboardTeam implements Packet<PacketListenerPlayOut> {
+
+    private String a = "";
+    private String b = "";
+    private String c = "";
+    private String d = "";
+    private String e;
+    private int f;
+    private Collection<String> g;
+    private int h;
+    private int i;
+
+    public PacketPlayOutScoreboardTeam() {
+        this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
+        this.f = -1;
+        this.g = Lists.newArrayList();
+    }
+
+    public PacketPlayOutScoreboardTeam(ScoreboardTeam scoreboardteam, int i) {
+        this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
+        this.f = -1;
+        this.g = Lists.newArrayList();
+        this.a = scoreboardteam.getName();
+        this.h = i;
+        if (i == 0 || i == 2) {
+            this.b = scoreboardteam.getDisplayName();
+            this.c = scoreboardteam.getPrefix();
+            this.d = scoreboardteam.getSuffix();
+            this.i = scoreboardteam.packOptionData();
+            this.e = scoreboardteam.getNameTagVisibility().e;
+            this.f = scoreboardteam.l().b();
+        }
+
+        if (i == 0) {
+            this.g.addAll(scoreboardteam.getPlayerNameSet());
+        }
+
+    }
+
+    public PacketPlayOutScoreboardTeam(ScoreboardTeam scoreboardteam, Collection<String> collection, int i) {
+        this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
+        this.f = -1;
+        this.g = Lists.newArrayList();
+        if (i != 3 && i != 4) {
+            throw new IllegalArgumentException("Method must be join or leave for player constructor");
+        } else if (collection != null && !collection.isEmpty()) {
+            this.h = i;
+            this.a = scoreboardteam.getName();
+            this.g.addAll(collection);
+        } else {
+            throw new IllegalArgumentException("Players cannot be null/empty");
+        }
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.c(16);
+        this.h = packetdataserializer.readByte();
+        if (this.h == 0 || this.h == 2) {
+            this.b = packetdataserializer.c(32);
+            this.c = packetdataserializer.c(16);
+            this.d = packetdataserializer.c(16);
+            this.i = packetdataserializer.readByte();
+            this.e = packetdataserializer.c(32);
+            this.f = packetdataserializer.readByte();
+        }
+
+        if (this.h == 0 || this.h == 3 || this.h == 4) {
+            int i = packetdataserializer.e();
+
+            for (int j = 0; j < i; ++j) {
+                this.g.add(packetdataserializer.c(40));
+            }
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a(this.a);
+        packetdataserializer.writeByte(this.h);
+        if (this.h == 0 || this.h == 2) {
+            packetdataserializer.a(this.b);
+            packetdataserializer.a(this.c);
+            packetdataserializer.a(this.d);
+            packetdataserializer.writeByte(this.i);
+            packetdataserializer.a(this.e);
+            packetdataserializer.writeByte(this.f);
+        }
+
+        if (this.h == 0 || this.h == 3 || this.h == 4) {
+            packetdataserializer.b(this.g.size());
+            Iterator iterator = this.g.iterator();
+
+            while (iterator.hasNext()) {
+                String s = (String) iterator.next();
+
+                packetdataserializer.a(s);
+            }
+        }
+
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
index 3a4b142..b820598 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
@@ -11,7 +11,7 @@ public final class Versioning {
     public static String getBukkitVersion() {
         String result = "Unknown-Version";
 
-        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/org.github.paperspigot/paperspigot-api/pom.properties");
+        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/net.avicus/magnet-api/pom.properties");
         Properties properties = new Properties();
 
         if (stream != null) {
-- 
2.6.4

