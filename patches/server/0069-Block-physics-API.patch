From cc59187521bb888f4972aafa34c34c3ac2eb8b85 Mon Sep 17 00:00:00 2001
From: Austin Mayes <austin@avicus.net>
Date: Mon, 16 Oct 2017 17:23:46 -0500
Subject: [PATCH] Block physics API

---
 src/main/java/net/minecraft/server/World.java | 22 ++++++++++++
 .../bukkit/craftbukkit/block/CraftBlock.java  | 35 +++++++++++++++++++
 .../craftbukkit/util/CraftMagicNumbers.java   | 15 ++++++++
 3 files changed, 72 insertions(+)

diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index f37a187a..48d5cd7d 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -455,6 +455,15 @@ public abstract class World implements IBlockAccess {
     }
     // CraftBukkit end
 
+    // SportBukkit start - add method that just does the physics
+    public void updatePhysicsAndRedstone(BlockPosition blockposition, IBlockData oldBlock, IBlockData newBlock) {
+        this.update(blockposition, oldBlock.getBlock());
+        if (newBlock.getBlock().isComplexRedstone()) { // Do it this way to avoid the obfuscation
+            this.updateAdjacentComparators(blockposition, newBlock.getBlock());
+        }
+    }
+    // SportBukkit end
+
     public boolean setAir(BlockPosition blockposition) {
         return this.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 3);
     }
@@ -537,6 +546,7 @@ public abstract class World implements IBlockAccess {
         spigotConfig.antiXrayInstance.updateNearbyBlocks(this, blockposition); // Spigot
     }
 
+
     public void a(BlockPosition blockposition, Block block, EnumDirection enumdirection) {
         if (enumdirection != EnumDirection.WEST) {
             this.d(blockposition.west(), block);
@@ -564,6 +574,10 @@ public abstract class World implements IBlockAccess {
 
     }
 
+    public void applySelfPhysics(BlockPosition target, Block cause, BlockPosition source) {
+        d(target, cause);
+    } // SportBukkit - method alias
+
     public void d(BlockPosition blockposition, final Block block) {
         if (!this.isClientSide) {
             IBlockData iblockdata = this.getType(blockposition);
@@ -3220,6 +3234,14 @@ public abstract class World implements IBlockAccess {
         while (iterator.hasNext()) {
             EnumDirection enumdirection = (EnumDirection) iterator.next();
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
+            // SportBukkit start - extract method
+            updateComparator(blockposition1, block, enumdirection, blockposition);
+        }
+    }
+
+    public void updateComparator(BlockPosition blockposition1, Block block, EnumDirection enumdirection, BlockPosition blockposition) {
+        {
+            // SportBukkit end
 
             if (this.isLoaded(blockposition1)) {
                 IBlockData iblockdata = this.getType(blockposition1);
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 5f84ba33..9af96a64 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -20,6 +20,7 @@ import org.bukkit.craftbukkit.CraftChunk;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemStack;
+import org.bukkit.material.MaterialData;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.util.BlockVector;
@@ -590,4 +591,38 @@ public class CraftBlock implements Block {
     public RayBlockIntersection rayTrace(Location start, double distance) {
         return rayTrace(start.toVector(), start.toVector().add(start.getDirection().multiply(distance)));
     }
+
+    public net.minecraft.server.Chunk nmsChunk() {
+        return chunk.getHandle();
+    }
+
+    public net.minecraft.server.World nmsWorld() {
+        return nmsChunk().getWorld();
+    }
+
+    public BlockPosition nmsPosition() {
+        return new BlockPosition(x, y, z);
+    }
+
+    @Override
+    public void simulateNeighborChange(BlockFace neighbor, MaterialData before, MaterialData after) {
+        final net.minecraft.server.World world = nmsWorld();
+        final BlockPosition pos = nmsPosition();
+        final BlockPosition neighborPos = pos.plus(neighbor.normal());
+
+        // This is supposed to be functionally equivalent to updatePhysicsAndRedstone,
+        // which uses the before state as the source rather than the after state
+        // (for unknown reasons), so we do the same here.
+        world.applySelfPhysics(pos, CraftMagicNumbers.getBlock(before.getItemType()), neighborPos);
+
+        final net.minecraft.server.Block afterBlock = CraftMagicNumbers.getBlock(after.getItemType());
+        if(afterBlock.isComplexRedstone()) { // Avoided IBlockProperties.n() due to renaming risk
+            world.updateComparator(pos, afterBlock, blockFaceToNotch(neighbor.getOppositeFace()), neighborPos);
+        }
+    }
+
+    @Override
+    public void simulateChangeForNeighbors(MaterialData before, MaterialData after) {
+        nmsWorld().updatePhysicsAndRedstone(nmsPosition(), CraftMagicNumbers.getBlockData(before), CraftMagicNumbers.getBlockData(after));
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 589dba72..99d7519f 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.util;
 
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -10,6 +11,7 @@ import java.util.logging.Logger;
 
 import net.minecraft.server.Block;
 import net.minecraft.server.Blocks;
+import net.minecraft.server.IBlockData;
 import net.minecraft.server.Item;
 import net.minecraft.server.MinecraftKey;
 import net.minecraft.server.MojangsonParseException;
@@ -24,6 +26,7 @@ import org.bukkit.UnsafeValues;
 import org.bukkit.craftbukkit.CraftStatistic;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.inventory.ItemStack;
+import org.bukkit.material.MaterialData;
 import org.bukkit.util.StringUtil;
 
 @SuppressWarnings("deprecation")
@@ -143,4 +146,16 @@ public final class CraftMagicNumbers implements UnsafeValues {
         }
         return matches;
     }
+
+    public static IBlockData getBlockData(MaterialData material) {
+        return getBlock(material.getItemType()).fromLegacyData(material.getData());
+    }
+
+    public static Set<IBlockData> getBlockData(Set<MaterialData> materials) {
+        ImmutableSet.Builder<IBlockData> nms = ImmutableSet.builder();
+        for(MaterialData bukkit : materials) {
+            nms.add(getBlockData(bukkit));
+        }
+        return nms.build();
+    }
 }
-- 
2.18.0.windows.1

