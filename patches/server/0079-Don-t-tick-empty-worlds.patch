From a5a8e39c8a4b3b46be653050049439c0c8bcfdcf Mon Sep 17 00:00:00 2001
From: Austin Mayes <austin@avicus.net>
Date: Mon, 16 Oct 2017 22:08:15 -0500
Subject: [PATCH] Don't tick empty worlds

---
 .../net/minecraft/server/ChunkProviderServer.java  | 12 +++++++
 .../java/net/minecraft/server/MinecraftServer.java |  3 +-
 src/main/java/net/minecraft/server/PlayerList.java |  2 +-
 src/main/java/org/bukkit/CraftBukkitRuntime.java   |  4 +++
 .../java/org/bukkit/craftbukkit/CraftServer.java   | 11 ++++++
 .../java/org/bukkit/craftbukkit/CraftWorld.java    | 39 ++++++++++++++++++++++
 6 files changed, 69 insertions(+), 2 deletions(-)

diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index c4dab42..b79846e 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -414,6 +414,18 @@ public class ChunkProviderServer implements IChunkProvider {
         return this.chunkProvider.unloadChunks();
     }
 
+    // SportBukkit start
+    public int unloadAllChunks(boolean save) {
+        int count = 0;
+        for(Chunk chunk : new ArrayList<>(chunks.values())) {
+            queueUnload(chunk.locX, chunk.locZ);
+                count++;
+        }
+        unloadChunks();
+        return count;
+    }
+    // SportBukkit end
+
     public boolean canSave() {
         return !this.world.savingDisabled;
     }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index f8843c7..9ae45ac 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -512,7 +512,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     public void safeShutdown() {
         this.isRunning = false;
     }
-
+    
     // PaperSpigot start - Further improve tick loop
     private static final int TPS = 20;
     private static final long SEC_IN_NANO = 1000000000;
@@ -823,6 +823,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
             // if (i == 0 || this.getAllowNether()) {
                 WorldServer worldserver = this.worlds.get(i);
+                if(!worldserver.getWorld().checkTicking()) continue; // SportBukkit
 
                 this.methodProfiler.a(worldserver.getWorldData().getName());
                 /* Drop global time updates
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index f276dfc..018711f 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -52,7 +52,7 @@ public abstract class PlayerList {
     private static final SimpleDateFormat g = new SimpleDateFormat("yyyy-MM-dd \'at\' HH:mm:ss z");
     private final MinecraftServer server;
     public final List<EntityPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
-    private final Map<UUID, EntityPlayer> j = Maps.newHashMap();
+    private final Map<UUID, EntityPlayer> j = Maps.newHashMap(); public Map<UUID, EntityPlayer> playersById() { return j; } // SportBukkit - accessor
     private final GameProfileBanList k;
     private final IpBanList l;
     private final OpList operators;
diff --git a/src/main/java/org/bukkit/CraftBukkitRuntime.java b/src/main/java/org/bukkit/CraftBukkitRuntime.java
index 7728f57..1e6eb70 100644
--- a/src/main/java/org/bukkit/CraftBukkitRuntime.java
+++ b/src/main/java/org/bukkit/CraftBukkitRuntime.java
@@ -1,5 +1,7 @@
 package org.bukkit;
 
+import com.google.inject.Injector;
+import javax.annotation.Nullable;
 import net.minecraft.server.DispenserRegistry;
 import org.bukkit.craftbukkit.inventory.CraftItemFactory;
 import org.bukkit.craftbukkit.registry.CraftKey;
@@ -20,6 +22,8 @@ public class CraftBukkitRuntime implements BukkitRuntime {
     }
   }
 
+  protected @Nullable Injector injector;
+
   public CraftBukkitRuntime() {
     DispenserRegistry.c();
   }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 5554922..df602fd 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -72,6 +72,7 @@ import org.bukkit.craftbukkit.metadata.WorldMetadataStore;
 import org.bukkit.craftbukkit.potion.CraftPotionBrewer;
 import org.bukkit.craftbukkit.scheduler.CraftScheduler;
 import org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager;
+import org.bukkit.craftbukkit.util.CaseInsensitiveNameMap;
 import org.bukkit.craftbukkit.util.CraftIconCache;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.DatFileFilter;
@@ -570,6 +571,16 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     }
 
     @Override
+    public boolean getKeepSpawnInMemory() {
+        return this.configuration.getBoolean("settings.keep-spawn-loaded", true);
+    }
+
+    @Override
+    public boolean getTickEmptyWorlds() {
+        return this.configuration.getBoolean("settings.tick-empty-worlds", true);
+    }
+
+    @Override
     public boolean getAllowEnd() {
         return this.configuration.getBoolean("settings.allow-end");
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 2bdbd18..daf6d19 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -86,6 +86,40 @@ public class CraftWorld implements World {
         if (server.chunkGCPeriod > 0) {
             chunkGCTickCount = rand.nextInt(server.chunkGCPeriod);
         }
+
+        world.keepSpawnInMemory = world.getServer().getKeepSpawnInMemory();
+    }
+
+    private boolean ticking = false;
+
+    @Override
+    public boolean isTicking() {
+        return ticking;
+    }
+
+    public boolean checkTicking() {
+        if(ticking) {
+            if(!(hasPlayers() || server.getTickEmptyWorlds())) {
+                ticking = false;
+                world.getServer().getLogger().info("Stopping world " + getName());
+                unloadAllChunks();
+            }
+        } else if(hasPlayers()) {
+            ticking = true;
+            world.getServer().getLogger().info("Starting world " + getName());
+            setKeepSpawnInMemory(getKeepSpawnInMemory());
+        }
+        return ticking;
+    }
+
+    @Override
+    public int getPlayerCount() {
+        return getHandle().players.size();
+    }
+
+    @Override
+    public boolean hasPlayers() {
+        return getPlayerCount() > 0;
     }
 
     @Override
@@ -231,6 +265,11 @@ public class CraftWorld implements World {
         return true;
     }
 
+    @Override
+    public int unloadAllChunks() {
+        return getHandle().chunkProviderServer.unloadAllChunks(true);
+    }
+
     public boolean regenerateChunk(int x, int z) {
         unloadChunk(x, z, false, false);
 
-- 
2.6.4

